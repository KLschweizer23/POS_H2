/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pos_h2;

import extraClasses.TransferObject;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableModel;
import myUtilities.MessageHandler;
import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.view.JasperViewer;
import pos_h2_database.DB_TransferStocks;
import pos_h2_database.Item;
import pos_h2_database.StockTransfer;

/**
 *
 * @author KL_Schweizer
 */
public class ViewSingleTransferStock extends javax.swing.JDialog {

    private DefaultTableModel dtm;
    private StockTransfer st;
    private HashMap<String, Item> items;
    private double totalAmount = 0;
    
    public ViewSingleTransferStock(java.awt.Frame parent, boolean modal, StockTransfer st) {
        super(parent, modal);
        initComponents();
        
        this.st = st;
        
        createColumns();
        prepareTable();
    }
    
    private void createColumns(){
        dtm = new DefaultTableModel(0,0){
            @Override
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };
        table_items.setModel(dtm);
        dtm.addColumn("Item");
        dtm.addColumn("Article");
        dtm.addColumn("Brand");
        dtm.addColumn("Price");
        dtm.addColumn("Quantity");
    }
    
    private void prepareTable(){
        DB_TransferStocks tsDb = new DB_TransferStocks();
        
        dtm.setRowCount(0);
        
        items = new HashMap<>();
        
        items = tsDb.getItemsByTransferId(st.getId());
        for(String id : items.keySet()){
            String[] rowData = {
                items.get(id).getName(),
                items.get(id).getArticle(),
                items.get(id).getBrand(),
                (char)8369 + " " + items.get(id).getPrice(),
                items.get(id).getQuantity()
            };
            dtm.addRow(rowData);
        }
        
        if(table_items.getRowCount() > 0)
            table_items.setRowSelectionInterval(0, 0);
        
        table_items.setRowHeight(30);
        label_totalItems.setText(items.size() + " Item/s");
        label_transferId.setText(st.getId());
        label_dateOfTransfer.setText(st.getDate());
        label_storeDestination.setText(st.getStoreId());
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table_items = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        label_transferId = new javax.swing.JLabel();
        label_totalItems = new javax.swing.JLabel();
        label_storeDestination = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        label_dateOfTransfer = new javax.swing.JLabel();
        button_generate = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();
        label_status = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jScrollPane1.setFocusable(false);

        table_items.setFillsViewportHeight(true);
        table_items.setFocusable(false);
        table_items.setRequestFocusEnabled(false);
        table_items.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        table_items.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        table_items.getTableHeader().setResizingAllowed(false);
        table_items.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(table_items);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("Transfer ID:");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Total Items:");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Store Destination:");

        label_transferId.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        label_transferId.setText("0");

        label_totalItems.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        label_totalItems.setText("0 Item/s");

        label_storeDestination.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        label_storeDestination.setText("None");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel7.setText("Date of Transfer:");

        label_dateOfTransfer.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        label_dateOfTransfer.setText("None");

        button_generate.setText("Generate Transfer Report");
        button_generate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_generateActionPerformed(evt);
            }
        });

        label_status.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        label_status.setText("No Process");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 620, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(label_dateOfTransfer)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(button_generate))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(label_totalItems))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(label_transferId))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(label_storeDestination))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(label_status)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(label_transferId))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(label_totalItems))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(label_storeDestination))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(label_dateOfTransfer)
                    .addComponent(button_generate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(label_status)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void button_generateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_generateActionPerformed
        if(table_items.getRowCount() >= 0){
            
            SwingWorker<Void, String[]> worker = new SwingWorker(){
                @Override
                protected Void doInBackground(){
                    progressBar.setIndeterminate(true);
                    label_status.setText("Processing Report...");
                    button_generate.setEnabled(false);
                    try{
                        String reportPath = System.getProperty("user.dir") + "\\TransferReport.jrxml";
                        Map<String, Object> parameters = new HashMap<>();
                        parameters.put("logo", getClass().getResource("/Images/logo_h2.png"));

                        List<TransferObject> collectionList = new ArrayList<>();

                        collectionList = getTransferredItems(); // Get the stocks!

                        JRBeanCollectionDataSource itemsJRBean = new JRBeanCollectionDataSource(collectionList);
                        parameters.put("CollectionBeanParam", itemsJRBean);

                        String date = label_dateOfTransfer.getText();
                        String totalItems = label_totalItems.getText();
                        String newTotalAmount = totalAmount + "";
                        String stockFrom = "H2-MED";
                        String stockTo = label_storeDestination.getText();

                        parameters.put("date", date);
                        parameters.put("totalItems", totalItems);
                        parameters.put("totalAmount", newTotalAmount);
                        parameters.put("stockFrom", stockFrom);
                        parameters.put("stockTo", stockTo);

                        InputStream input = new FileInputStream(new File(reportPath));
                        JasperDesign jdesign = JRXmlLoader.load(input);

                        JasperReport jreport = JasperCompileManager.compileReport(jdesign);
                        JasperPrint jprint = JasperFillManager.fillReport(jreport, parameters, new JREmptyDataSource());

                        JasperViewer.viewReport(jprint, false);
                    }catch(Exception ex){
                        JOptionPane.showMessageDialog(null, ex);
                    }
                    return null;
                }
                @Override
                protected void done(){
                    label_status.setText("No Process");
                    button_generate.setEnabled(true);
                    progressBar.setIndeterminate(false);
                    new MessageHandler().message("Transfer Report Created!");
                    dispose();
                }
            };
            worker.execute();
        }
    }//GEN-LAST:event_button_generateActionPerformed

    private ArrayList<TransferObject> getTransferredItems(){
        ArrayList<TransferObject> transferList = new ArrayList<>();
        totalAmount = 0;
        for(String id : items.keySet()){
            Item item = items.get(id);
            double price = Double.parseDouble(item.getPrice());
            double quantity = Double.parseDouble(item.getQuantity());
            double totalPrice = price * quantity;
            totalAmount += totalPrice;
            TransferObject to = new TransferObject(
                    item.getName(),
                    item.getBrand(),
                    item.getArticle(),
                    quantity,
                    price,
                    totalPrice
            );
            transferList.add(to);
        }
        
        return transferList;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_generate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel label_dateOfTransfer;
    private javax.swing.JLabel label_status;
    private javax.swing.JLabel label_storeDestination;
    private javax.swing.JLabel label_totalItems;
    private javax.swing.JLabel label_transferId;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JTable table_items;
    // End of variables declaration//GEN-END:variables
}
