/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pos_h2;

import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JViewport;
import javax.swing.KeyStroke;
import javax.swing.table.DefaultTableModel;
import myUtilities.MessageHandler;
import myUtilities.SystemUtilities;
import pos_h2_database.DB_Item;
import pos_h2_database.DB_Store;
import pos_h2_database.DB_TransferStocks;
import pos_h2_database.Item;
import pos_h2_database.StockTransfer;
import pos_h2_database.Store;

public class TransferStockDialog extends javax.swing.JDialog {

    private DefaultTableModel dtm1, dtm2;
    private ArrayList<String> idList, storeIdList;
    private HashMap<String, Item> item;
    private HashMap<String, Store> store;
    private HashMap<Integer, String> storeIdLocation;

    JFrame parentFrame;
    
    final private int rowHeight = 30;
    private int selectedRow = 0;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        itemTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        transferredTable = new javax.swing.JTable();
        field_filter = new javax.swing.JTextField();
        button_add = new javax.swing.JButton();
        comboBox_storeName = new javax.swing.JComboBox<>();
        button_confirm = new javax.swing.JButton();
        button_remove = new javax.swing.JButton();
        button_edit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jScrollPane1.setFocusable(false);

        itemTable.setFillsViewportHeight(true);
        itemTable.setFocusable(false);
        itemTable.setRequestFocusEnabled(false);
        itemTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        itemTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        itemTable.getTableHeader().setResizingAllowed(false);
        itemTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(itemTable);

        jScrollPane2.setFocusable(false);

        transferredTable.setFillsViewportHeight(true);
        transferredTable.setFocusable(false);
        transferredTable.setRequestFocusEnabled(false);
        transferredTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        transferredTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        transferredTable.getTableHeader().setResizingAllowed(false);
        transferredTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(transferredTable);

        field_filter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                field_filterKeyReleased(evt);
            }
        });

        button_add.setText("Add");
        button_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_addActionPerformed(evt);
            }
        });

        button_confirm.setText("Confirm");
        button_confirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_confirmActionPerformed(evt);
            }
        });

        button_remove.setText("Remove");
        button_remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_removeActionPerformed(evt);
            }
        });

        button_edit.setText("Edit");
        button_edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_editActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(field_filter, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(button_add)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(comboBox_storeName, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(button_edit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(button_remove)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(button_confirm))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 385, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(field_filter)
                    .addComponent(button_add)
                    .addComponent(comboBox_storeName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(button_remove)
                    .addComponent(button_edit)
                    .addComponent(button_confirm))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 416, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 416, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void createColumns(){
        dtm1 = new DefaultTableModel(0, 0){
            @Override
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };
        itemTable.setModel(dtm1);
        dtm1.addColumn("ID");
        dtm1.addColumn("Item");
        dtm1.addColumn("Article");
        dtm1.addColumn("Brand");
        dtm1.addColumn("Quantity");
        dtm1.addColumn("Price");
    }
    
    private void createColumnsTransffered(){
        dtm2 = new DefaultTableModel(0, 0){
            @Override
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };
        transferredTable.setModel(dtm2);
        dtm2.addColumn("ID");
        dtm2.addColumn("Item");
        dtm2.addColumn("Quantity");
    }
    
    private void processTable(String keyword, int colIndex){
        DB_Item itemDb = new DB_Item();
        dtm1.setRowCount(0);
        
        idList = itemDb.getIdList();
        
        item = itemDb.processData(keyword, colIndex);
        
        for(int i = 0; i < item.size(); i++){
            String id = idList.get(i);
            String[] rowData = {
                item.get(id).getId(),
                item.get(id).getName(),
                item.get(id).getArticle(),
                item.get(id).getBrand(),
                item.get(id).getQuantity(),
                (char)8369 + " " + item.get(id).getPrice()
            };
            dtm1.addRow(rowData);
        }
        if(itemTable.getRowCount() > 0)
            itemTable.setRowSelectionInterval(0, selectedRow > itemTable.getRowCount() - 1 ? itemTable.getRowCount() - 1 : selectedRow);
        itemTable.setRowHeight(rowHeight);
        adjustViewport();
    }
    private void setup()
    {
        int property = JComponent.WHEN_IN_FOCUSED_WINDOW;
        //COMMANDS
            //ESC
        getRootPane().registerKeyboardAction(e -> {
            this.dispose();
        }, KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), property);
        
            //TABLE CONTROL
        getRootPane().registerKeyboardAction(e -> {
            controlTable(true);
        }, KeyStroke.getKeyStroke(KeyEvent.VK_DOWN, 0), property);
        
        getRootPane().registerKeyboardAction(e -> {
            controlTable(false);
        }, KeyStroke.getKeyStroke(KeyEvent.VK_UP, 0), property);
        
            //Add Data
        getRootPane().registerKeyboardAction(e ->{
            addData();
        }, KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), property);
    }
   private void setupTable()
    {
        itemTable.addMouseListener(new MouseListener() {
            private boolean onTable = false;
            
            @Override
            public void mouseClicked(MouseEvent e) {
                if(onTable)
                {
                    Point p = e.getPoint();
                    int y = p.y / rowHeight;
                    if(y < dtm1.getRowCount())
                            addData();
                }
            }
            @Override
            public void mousePressed(MouseEvent e) {
            }
            @Override
            public void mouseReleased(MouseEvent e) {
            }
            @Override
            public void mouseEntered(MouseEvent e) {
                onTable = true;
            }
            @Override
            public void mouseExited(MouseEvent e) {
                onTable = false;
            }
        });
        
        itemTable.addMouseMotionListener(new MouseMotionListener() {
            @Override
            public void mouseDragged(MouseEvent e) {
                
            }

            @Override
            public void mouseMoved(MouseEvent e) {
                Point p = e.getPoint();
                int y = p.y / rowHeight;
                if(y < dtm1.getRowCount())
                    itemTable.setRowSelectionInterval(0, y);
            }
        });
    }
    private void controlTable(boolean goDown)
    {
        if(itemTable.getRowCount() > 0)
            if(goDown)
                if(itemTable.getSelectedRow() + 1 < itemTable.getRowCount())
                    itemTable.setRowSelectionInterval(0, itemTable.getSelectedRow() + 1);
                else
                    itemTable.setRowSelectionInterval(0,0);
            else        
                if(itemTable.getSelectedRow() != 0)
                    itemTable.setRowSelectionInterval(0, itemTable.getSelectedRow() - 1);
                else
                    itemTable.setRowSelectionInterval(0,itemTable.getRowCount() - 1);
        
        selectedRow = itemTable.getSelectedRow();
        adjustViewport();
    }
    
    private void adjustViewport()
    {
        JViewport viewport = (JViewport)itemTable.getParent();
        Rectangle rect = itemTable.getCellRect(itemTable.getSelectedRow(), 0, true);
        Point pt = viewport.getViewPosition();
        rect.setLocation(rect.x-pt.x, (rect.y-pt.y) + rowHeight);
        itemTable.scrollRectToVisible(rect);
    }
    
    private void addData(){
        MessageHandler mh = new MessageHandler();
        SystemUtilities su = new SystemUtilities();
        if(itemTable.getRowCount() > 0){
            Item itemObj = item.get(itemTable.getValueAt(itemTable.getSelectedRow(), 0).toString());
            if(!itemObj.getQuantity().equals("0")){
                String quantity = su.inputNumberUser("Enter number of items to transfer: ");
                if(quantity != null){
                    int currentQuantity = Integer.parseInt(itemObj.getQuantity());
                    int quantityToBuy = Integer.parseInt(quantity);
                    if(currentQuantity >= quantityToBuy){
                        itemObj.setQuantityToBuy(quantity);
                        String[] rowData = {itemObj.getId(), itemObj.getName(), itemObj.getQuantityToBuy()};
                        dtm2.addRow(rowData);
                        if(transferredTable.getRowCount() > 0)
                            transferredTable.setRowSelectionInterval(0, 0);
                        transferredTable.setRowHeight(20);
                    }
                }
            }else{
                mh.warning("There's not enough stocks for this item!");
            }
        }
    }
    
    private void processStore(){
        DB_Store storeDb = new DB_Store();
        store = storeDb.processData("", 1);
        storeIdList = storeDb.getIdList();
        storeIdLocation = new HashMap<>();
        for(int i = 0; i < store.size(); i++){
            String id = storeIdList.get(i);
            storeIdLocation.put(i, id);
            comboBox_storeName.addItem(store.get(id).getName().toString());
        }
    }
    
    private void field_filterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_field_filterKeyReleased
        processTable(field_filter.getText(), 1);
    }//GEN-LAST:event_field_filterKeyReleased

    private void button_removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_removeActionPerformed
        if(transferredTable.getRowCount() > 0){
            int selectedRow = transferredTable.getSelectedRow();
            dtm2.removeRow(selectedRow);
            if(transferredTable.getRowCount() > 0)
                transferredTable.setRowSelectionInterval(0, selectedRow == transferredTable.getRowCount() - 1 ? selectedRow : selectedRow - 1);
        }
    }//GEN-LAST:event_button_removeActionPerformed

    private void button_confirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_confirmActionPerformed
        MessageHandler mh = new MessageHandler();
        DB_TransferStocks transferStocksDb = new DB_TransferStocks();
        int choice = mh.confirm("<html>Press <b>OK</b> to proceed...</html>");
        if(choice == JOptionPane.YES_OPTION){
            String availableId = transferStocksDb.getAvailableId() + "";
            if(!availableId.equals("-1")){
                for(int i = 0; i < transferredTable.getRowCount(); i++){
                    Item itemObj = item.get(transferredTable.getValueAt(i, 0).toString());
                    int currentQuantity = Integer.parseInt(itemObj.getQuantity());
                    int transferQuantity = Integer.parseInt(transferredTable.getValueAt(i, 2).toString());
                    itemObj.setQuantity((currentQuantity - transferQuantity) + "");
                    DB_Item itemDb = new DB_Item();
                    itemDb.updateData(itemObj);

                    StockTransfer st = new StockTransfer();
                    st.setStockTransferId(availableId);
                    st.setItemId(itemObj.getId());
                    st.setItemQuantity(transferQuantity + "");
                    st.setDate(LocalDate.now().toString());
                    st.setStoreId(storeIdLocation.get(comboBox_storeName.getSelectedIndex()));
                    transferStocksDb.insertData(st);
                }
                dispose();
            }else{
                mh.error("An error occured while processing stocks!", false);
            }
        }
    }//GEN-LAST:event_button_confirmActionPerformed

    private void button_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_addActionPerformed
        addData();
    }//GEN-LAST:event_button_addActionPerformed

    private void button_editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_editActionPerformed
        StoreDialog store = new StoreDialog(parentFrame, true);
        int x = (parentFrame.getWidth() - store.getWidth()) / 2;
        int y = (parentFrame.getHeight() - store.getHeight()) / 2;
        store.setLocation(x,y);
        store.setVisible(true);
    }//GEN-LAST:event_button_editActionPerformed

    public TransferStockDialog(JFrame parent, boolean modal){
        
        super(parent, modal);
        initComponents();
        
        parentFrame = parent;
        
        createColumns();
        createColumnsTransffered();
        processTable("", 0);
        processStore();
        setupTable();
        setup();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_add;
    private javax.swing.JButton button_confirm;
    private javax.swing.JButton button_edit;
    private javax.swing.JButton button_remove;
    private javax.swing.JComboBox<String> comboBox_storeName;
    private javax.swing.JTextField field_filter;
    private javax.swing.JTable itemTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable transferredTable;
    // End of variables declaration//GEN-END:variables
}
