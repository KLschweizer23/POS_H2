/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pos_h2;

import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JFrame;
import javax.swing.JViewport;
import javax.swing.table.DefaultTableModel;
import myUtilities.MessageHandler;
import pos_h2_database.DB_Store;
import pos_h2_database.Item;
import pos_h2_database.Store;

/**
 *
 * @author KL_Schweizer
 */
public class StoreDialog extends javax.swing.JDialog {

    DefaultTableModel dtm;    
    private HashMap<String, Store> store;
    private ArrayList<String> idList;
    
    final private int rowHeight = 30;
    private int selectedRow = 0;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        storeTable = new javax.swing.JTable();
        textField_name = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        textField_details = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        label_id = new javax.swing.JLabel();
        button_add = new javax.swing.JButton();
        button_delete = new javax.swing.JButton();
        button_update = new javax.swing.JButton();
        button_clear = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jScrollPane1.setFocusable(false);

        storeTable.setFillsViewportHeight(true);
        storeTable.setFocusable(false);
        storeTable.setRequestFocusEnabled(false);
        storeTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        storeTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        storeTable.getTableHeader().setResizingAllowed(false);
        storeTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(storeTable);

        textField_name.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("Store Name:");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Store Details:");

        textField_details.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        jLabel3.setText("id:");

        label_id.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        label_id.setText("000");

        button_add.setText("Add");
        button_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_addActionPerformed(evt);
            }
        });

        button_delete.setText("Delete");
        button_delete.setEnabled(false);
        button_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_deleteActionPerformed(evt);
            }
        });

        button_update.setText("Update");
        button_update.setEnabled(false);
        button_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_updateActionPerformed(evt);
            }
        });

        button_clear.setFont(new java.awt.Font("Segoe UI", 0, 9)); // NOI18N
        button_clear.setText("clr");
        button_clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_clearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 392, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(label_id, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(button_clear, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(button_add)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(button_update)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(button_delete))
                            .addComponent(textField_name)
                            .addComponent(textField_details))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(label_id)
                    .addComponent(button_clear))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textField_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textField_details, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(button_add)
                    .addComponent(button_delete)
                    .addComponent(button_update))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void button_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_addActionPerformed
        if(!textField_name.getText().isBlank()){
            DB_Store storeDb = new DB_Store();
            Store storeObj = new Store();
            storeObj.setName(textField_name.getText());
            storeObj.setDetails(textField_details.getText());
            storeDb.insertData(storeObj);
            processTable("", 0);
            prepareFields(true);
        }else{
            MessageHandler mh = new MessageHandler();
            mh.warning("Blank name is not allowed!");
        }
    }//GEN-LAST:event_button_addActionPerformed

    private void button_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_updateActionPerformed
        if(!textField_name.getText().isBlank()){
            DB_Store storeDb = new DB_Store();
            Store storeObj = new Store();
            storeObj.setName(textField_name.getText());
            storeObj.setDetails(textField_details.getText());
            storeDb.updateData(storeObj);
            processTable("", 0);
            prepareFields(true);
        }else{
            MessageHandler mh = new MessageHandler();
            mh.warning("Blank name is not allowed!");
        }
    }//GEN-LAST:event_button_updateActionPerformed

    private void button_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_deleteActionPerformed
        DB_Store storeDb = new DB_Store();
        Store storeObj = store.get(storeTable.getValueAt(storeTable.getSelectedRow(), 0).toString());
        storeDb.deleteData(storeObj);
        processTable("", 0);
        prepareFields(true);
    }//GEN-LAST:event_button_deleteActionPerformed

    private void button_clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_clearActionPerformed
        prepareFields(true);
    }//GEN-LAST:event_button_clearActionPerformed

    private void createColumns(){
        dtm = new DefaultTableModel(0,0){
            @Override
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };
        storeTable.setModel(dtm);
        dtm.addColumn("ID");
        dtm.addColumn("Name");
        dtm.addColumn("Details");
    }
    
    private void processTable(String keyword, int colIndex){
        DB_Store storeDb = new DB_Store();
        dtm.setRowCount(0);
        
        idList = storeDb.getIdList();
        store = storeDb.processData(keyword, colIndex);
        
        for(int i = 0; i < store.size(); i++){
            String id = idList.get(i);
            String[] rowData = {
                store.get(id).getId(),
                store.get(id).getName(),
                store.get(id).getDetails()
            };
            dtm.addRow(rowData);
        }
        if(storeTable.getRowCount() > 0)
            storeTable.setRowSelectionInterval(0, selectedRow > storeTable.getRowCount() - 1 ? storeTable.getRowCount() - 1 : selectedRow);
        storeTable.setRowHeight(rowHeight);
        adjustViewport();
    }
    private void adjustViewport()
    {
        JViewport viewport = (JViewport)storeTable.getParent();
        Rectangle rect = storeTable.getCellRect(storeTable.getSelectedRow(), 0, true);
        Point pt = viewport.getViewPosition();
        rect.setLocation(rect.x-pt.x, (rect.y-pt.y) + rowHeight);
        storeTable.scrollRectToVisible(rect);
    }
    private void setupTable()
    {
        storeTable.addMouseListener(new MouseListener() {
            private boolean onTable = false;
            
            @Override
            public void mouseClicked(MouseEvent e) {
                if(onTable)
                {
                    Point p = e.getPoint();
                    int y = p.y / rowHeight;
                    if(y < dtm.getRowCount())
                        prepareFields(false);
                }
            }
            @Override
            public void mousePressed(MouseEvent e) {
            }
            @Override
            public void mouseReleased(MouseEvent e) {
            }
            @Override
            public void mouseEntered(MouseEvent e) {
                onTable = true;
            }
            @Override
            public void mouseExited(MouseEvent e) {
                onTable = false;
            }
        });
        
        storeTable.addMouseMotionListener(new MouseMotionListener() {
            @Override
            public void mouseDragged(MouseEvent e) {
                
            }

            @Override
            public void mouseMoved(MouseEvent e) {
                Point p = e.getPoint();
                int y = p.y / rowHeight;
                if(y < dtm.getRowCount())
                    storeTable.setRowSelectionInterval(0, y);
            }
        });
    } 
    
    private void prepareFields(boolean emptyFields){
        String id, name, details;
        
        if(emptyFields){
            id = "000";
            name = "";
            details = "";
        }else{
            id = storeTable.getValueAt(storeTable.getSelectedRow(), 0).toString();
            name = storeTable.getValueAt(storeTable.getSelectedRow(), 1).toString();
            details = storeTable.getValueAt(storeTable.getSelectedRow(), 2).toString();
        }
        label_id.setText(id);
        textField_name.setText(name);
        textField_details.setText(details);
        button_add.setEnabled(emptyFields);
        button_update.setEnabled(!emptyFields);
        button_delete.setEnabled(!emptyFields);
    }
    
    public StoreDialog(JFrame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        createColumns();
        processTable("", 0);
        setupTable();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_add;
    private javax.swing.JButton button_clear;
    private javax.swing.JButton button_delete;
    private javax.swing.JButton button_update;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel label_id;
    private javax.swing.JTable storeTable;
    private javax.swing.JTextField textField_details;
    private javax.swing.JTextField textField_name;
    // End of variables declaration//GEN-END:variables
}
